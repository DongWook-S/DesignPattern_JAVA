Part01_Iterator(이터레이터) 패턴
- 처리를 반복한다.
- 무엇인가 많이 모여 있을 때 이를 순서대로 가리키며 전체를 검색하고 처리를 반복하는 것.

Part02_Adapter = Wrapper 패턴
- 사이에 끼워 재사용 한다.
- 이미 제공된 코드를 그대로 사용할 수 없을 때, 필요한 형태로 변환한 후 이용하는 경우가 자주 있음
- '이미 제공된 것'과 '필요한 것' 사이의 '차이'를 메우는 디자인 패턴이 바로 '어댑터 패턴'
- Wrapper 패턴이라고 불리도 한다. 래퍼(Wrapper) 는 '감싸는 것' 을 의미.
  · 일반 상품을 깨끗한 포장지로 써서 선물용 상품으로 만드는 것처럼, 무언가를 포장해서 다른 용도로 사용할 수 있도록 변환 해주는 것이 래퍼이자 어댑터
- Part02_Adapter 패턴에는 다음과 같은 두 종류가 있음
  · 클래스에 의한 어댑터 패턴 (상속을 사용한 패턴)
  · 인스턴스에 의한 어댑터 패턴 (위임을 사용한 패턴)

Template Method 패턴
- 하위 클래스에서 구체적으로 처리한다.
- 상위 클래스 쪽에 템플릿이 될 메소드가 정의되어 있고, 그 메소드 정의에 추상 메소드가 사용된다.
  따라서 상위 클래스의 코드만 봐서는 최종적으로 어떻게 처리되는지 알 수 없다.
  상위 클래스로 알 수 있는 것은 추상 메소드를 호출 하는 방법 뿐.
- 추상 메소드를 실제로 구현하는 것은 하위 클래스
  하위 클래스에서 메소드를 구현하면 구체적인 처리 방식이 정해진다.
  다른 하위 클래스에서 구현을 다르게 하면, 처리도 다르게 이루어 진다.
  그러나, 어느 하위 클래스에서 어떻게 구현하더라도 처리의 큰 흐름은 상위 클래스에서 구성한 대로 된다.
