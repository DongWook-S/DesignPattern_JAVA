Iterator(이터레이터) 패턴
- 처리를 반복한다.
- 무엇인가 많이 모여 있을 때 이를 순서대로 가리키며 전체를 검색하고 처리를 반복하는 것.

Adapter = Wrapper 패턴
- 사이에 끼워 재사용 한다.
- 이미 제공된 코드를 그대로 사용할 수 없을 때, 필요한 형태로 변환한 후 이용하는 경우가 자주 있음
- '이미 제공된 것'과 '필요한 것' 사이의 '차이'를 메우는 디자인 패턴이 바로 '어댑터 패턴'
- Wrapper 패턴이라고 불리도 한다. 래퍼(Wrapper) 는 '감싸는 것' 을 의미.
  · 일반 상품을 깨끗한 포장지로 써서 선물용 상품으로 만드는 것처럼, 무언가를 포장해서 다른 용도로 사용할 수 있도록 변환 해주는 것이 래퍼이자 어댑터
- Adapter 패턴에는 다음과 같은 두 종류가 있음
  · 클래스에 의한 어댑터 패턴 (상속을 사용한 패턴)
  · 인스턴스에 의한 어댑터 패턴 (위임을 사용한 패턴)

Template Method 패턴
- 하위 클래스에서 구체적으로 처리한다.
- 상위 클래스 쪽에 템플릿이 될 메소드가 정의되어 있고, 그 메소드 정의에 추상 메소드가 사용된다.
  따라서 상위 클래스의 코드만 봐서는 최종적으로 어떻게 처리되는지 알 수 없다.
  상위 클래스로 알 수 있는 것은 추상 메소드를 호출 하는 방법 뿐.
- 추상 메소드를 실제로 구현하는 것은 하위 클래스
  하위 클래스에서 메소드를 구현하면 구체적인 처리 방식이 정해진다.
  다른 하위 클래스에서 구현을 다르게 하면, 처리도 다르게 이루어 진다.
  그러나, 어느 하위 클래스에서 어떻게 구현하더라도 처리의 큰 흐름은 상위 클래스에서 구성한 대로 된다.

Factory Method 패턴
- 하위 클래스에서 인스턴스를 만든다
- 인스턴스를 생성하는 공장을 Template Method 패턴으로 구성한 것.

Singleton 패턴
- 인스턴스를 단 하나만 만든다
- 지정한 클래스의 인스턴스가 반드시 1개만 존재한다는 것을 보증하고 싶을때 필요
- 인스턴스가 하나만 존재한다는 것을 프로그램 상에서 표현하고 싶을 때 필요
- Singleton 패턴에서는 인스턴스 수를 제한하고 있음. 제한을 둔다는 것은 전제 조건을 늘린다는 뜻.
- 인스턴스가 여러 개 존재하면 인스턴스가 서로 영향을 미쳐 뜻밖의 버그를 만들어 낼 수 있다.
  그러나 인스턴스가 하나뿐이라는 보장이 있다면 그 전체 조건 하에서 프로그래밍을 할 수 있다.

Prototype 패턴
- 복사해서 인스턴스를 만든다
- 종류가 너무 많아 클래스로 정리할 수 없는 경우
  · 첫 번째는 취급할 오브젝트 종류가 너무 많아서, 하나하나 다른 클래스로 만들면 소스 파일을 많이 작성해야 하는 경우
- 클래스로부터 인스턴스 생성이 어려운 경우
  · 두 번째는 생성하고 싶은 인스턴스가 복잡한 과정을 거쳐 만들어지는 것으로, 클래스로부터 만들기가 매우 어려운 경우
    예를 들어, 그래픽 에디터 등에서 사용자가 마우스로 그린 도형을 나타내는 인스턴스가 있다고 합시다. 이렇게 사용자 조작으로
    만들어지는 인스턴스를 프로그래밍해서 만들기는 어렵다. 사용자 조작으로 만들어진 인스턴스와 같은 것을 다시 만들고 싶은 경우에는
    지금 만든 인스턴스를 일단 저장해 두고 만들고 싶을 때 그것을 복사한다.
- 프레임워크와 생성하는 인스턴스를 분리하고 싶은 경우
  · 세 번째는 인스턴스를 생성하는 프레임워크를 특정 클래스에 의존하지 않게 하고 싶은 경우이다. 이러한 경우에는 클래스 이름을 지정해서
    인스턴스를 만드는 것이 아니라, 미리 원형이 될 인스턴스를 등록 해두고, 등록된 인스턴스를 복사해서 인스턴스를 생성한다.

